const fs = require("fs-extra");
const path = require("path");
const moment = require("moment");
const { toSlug, startCase, pathUrl } = require("./utils");
const { prettifyJavascript } = require("./prettier");

const SIDEBAR = "sidebar-schema.js";
const HOMEPAGE_ID = "schema";

module.exports = class Renderer {
  constructor(printer, outputDir, baseURL) {
    this.outputDir = outputDir;
    this.baseURL = baseURL;
    this.printer = printer;
    this.emptyOutputDir();
  }

  emptyOutputDir() {
    fs.emptyDirSync(this.outputDir);
  }

  async renderRootTypes(name, type) {
    let pages;

    if (typeof type !== "undefined") {
      const slug = toSlug(name);
      const dirPath = path.join(this.outputDir, slug);
      if (Array.isArray(type)) {
        type = type.reduce(function (r, o) {
          if (o && o.name) r[o.name] = o;
          return r;
        }, {});
      }

      await fs.ensureDir(dirPath);

      const filePath = path.join(dirPath, "_category_.yml");
      await fs.outputFile(filePath, `label: '${startCase(name)}'\n`, "utf8");

      pages = await Promise.all(
        Object.keys(type).map(async (name) => {
          return await this.renderTypeEntities(dirPath, name, type[name]);
        }),
      );
    }
    return pages;
  }

  async renderTypeEntities(dirPath, name, type) {
    if (typeof type !== "undefined") {
      const fileName = toSlug(name);
      const filePath = path.join(path.normalize(dirPath), `${fileName}.mdx`);
      const content = this.printer.printType(fileName, type);
      await fs.outputFile(filePath, content, "utf8");
      const pagePath = path.relative(this.outputDir, filePath);
      const page = pagePath.match(
        /(?<category>[A-z][A-z0-9-]*)[\\/]+(?<pageId>[A-z][A-z0-9-]*).mdx?$/,
      );
      const slug = pathUrl.join(page.groups.category, page.groups.pageId);
      return { category: startCase(page.groups.category), slug: slug };
    }
  }

  async renderSidebar() {
    const { schemaSidebar } = require("../../assets/sidebar.json");
    const sidebar = {
      schemaSidebar: schemaSidebar.map((entry) => {
        switch (entry.type) {
          case "doc":
            entry.id = pathUrl.join(this.baseURL, HOMEPAGE_ID);
            break;
          case "autogenerated":
            entry.dirName = this.baseURL;
            break;
          default: //do nothing
        }
        return entry;
      }),
    };

    const content = prettifyJavascript(
      `module.exports = ${JSON.stringify(sidebar, null, 2)};`,
    );

    const filePath = path.join(this.outputDir, SIDEBAR);
    await fs.outputFile(filePath, content, "utf8");

    return path.relative("./", filePath);
  }

  async renderHomepage(homepageLocation) {
    const homePage = path.basename(homepageLocation);
    const destLocation = path.join(this.outputDir, homePage);
    await fs.copy(homepageLocation, destLocation);
    const template = await fs.readFile(destLocation, "utf8");
    const data = template
      .replace(/##baseURL##/gm, pathUrl.resolve("/", this.baseURL))
      .replace(
        /##generated-date-time##/gm,
        moment().format("MMMM DD, YYYY [at] h:mm:ss A"),
      );
    await fs.outputFile(destLocation, data, "utf8");
  }
};
