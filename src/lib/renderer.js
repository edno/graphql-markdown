const fs = require("fs").promises;
const path = require("path");

const fsExtra = require("fs-extra");

const { toSlug, startCase, pathUrl } = require("./utils");
const { prettifyJavascript } = require("./prettier");

const SIDEBAR = "sidebar-schema.js";
const HOMEPAGE_ID = "schema";

module.exports = class Renderer {
  constructor(printer, outputDir, baseURL) {
    this.outputDir = outputDir;
    this.baseURL = baseURL;
    this.printer = printer;
    this.emptyOutputDir();
  }

  emptyOutputDir() {
    fsExtra.emptyDirSync(this.outputDir);
  }

  async renderRootTypes(typeName, type) {
    if (typeof type === "undefined" || type === null) {
      return undefined;
    }

    const slug = toSlug(typeName);
    const dirPath = path.join(this.outputDir, slug);
    if (Array.isArray(type)) {
      type = type.reduce(function (r, o) {
        if (o && o.name) r[o.name] = o;
        return r;
      }, {});
    }

    await fsExtra.ensureDir(dirPath);

    const filePath = path.join(dirPath, "_category_.yml");
    await fsExtra.outputFile(
      filePath,
      `label: '${startCase(typeName)}'\n`,
      "utf8",
    );

    return Promise.all(
      Object.keys(type).map(async (name) => {
        return this.renderTypeEntities(dirPath, name, type[name]);
      }),
    );
  }

  async renderTypeEntities(dirPath, name, type) {
    if (typeof type === "undefined" || type === null) {
      return undefined;
    }

    const fileName = toSlug(name);
    const filePath = path.join(path.normalize(dirPath), `${fileName}.mdx`);
    const content = this.printer.printType(fileName, type);
    await fsExtra.outputFile(filePath, content, "utf8");
    const pagePath = path.relative(this.outputDir, filePath);
    const page = pagePath.match(
      /(?<category>[A-z0-9-_]+)[\\/]+(?<pageId>[A-z0-9-_]+).mdx?$/,
    );
    const slug = pathUrl.join(page.groups.category, page.groups.pageId);
    return { category: startCase(page.groups.category), slug: slug };
  }

  async renderSidebar() {
    const { schemaSidebar } = require("../../assets/sidebar.json");
    const sidebar = {
      schemaSidebar: schemaSidebar.map((entry) => {
        switch (entry.type) {
          case "doc":
            entry.id = pathUrl.join(this.baseURL, HOMEPAGE_ID);
            break;
          case "autogenerated":
            entry.dirName = this.baseURL;
            break;
          default: //do nothing
        }
        return entry;
      }),
    };

    const jsonSidebar = JSON.stringify(sidebar, null, 2);
    const content = prettifyJavascript(`module.exports = ${jsonSidebar};`);

    const filePath = path.join(this.outputDir, SIDEBAR);
    await fsExtra.outputFile(filePath, content, "utf8");

    return path.relative("./", filePath);
  }

  async renderHomepage(homepageLocation) {
    const homePage = path.basename(homepageLocation);
    const destLocation = path.join(this.outputDir, homePage);
    const slug = pathUrl.resolve("/", this.baseURL);

    await fsExtra.copy(homepageLocation, destLocation);

    const template = await fs.readFile(destLocation, "utf8");

    const data = template
      .replace(/##baseURL##/gm, slug)
      .replace(/##generated-date-time##/gm, new Date().toLocaleString());
    await fsExtra.outputFile(destLocation, data, "utf8");
  }
};
