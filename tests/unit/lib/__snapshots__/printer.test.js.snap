// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`lib printer class Printer printCode() returns a Markdown codeblock with non supported message for unsupported type: windows 1`] = `
"
\`\`\`graphql
\\"TestFooBarType\\" not supported
\`\`\`
"
`;

exports[`lib printer class Printer printCode() returns a Markdown graphql codeblock with type directive: windows 1`] = `
"
\`\`\`graphql
TestDirective
\`\`\`
"
`;

exports[`lib printer class Printer printCode() returns a Markdown graphql codeblock with type enum: windows 1`] = `
"
\`\`\`graphql
TestEnum
\`\`\`
"
`;

exports[`lib printer class Printer printCode() returns a Markdown graphql codeblock with type input: windows 1`] = `
"
\`\`\`graphql
TestInput
\`\`\`
"
`;

exports[`lib printer class Printer printCode() returns a Markdown graphql codeblock with type interface: windows 1`] = `
"
\`\`\`graphql
TestInterface
\`\`\`
"
`;

exports[`lib printer class Printer printCode() returns a Markdown graphql codeblock with type object: windows 1`] = `
"
\`\`\`graphql
TestObject
\`\`\`
"
`;

exports[`lib printer class Printer printCode() returns a Markdown graphql codeblock with type query: windows 1`] = `
"
\`\`\`graphql
TestQuery
\`\`\`
"
`;

exports[`lib printer class Printer printCode() returns a Markdown graphql codeblock with type scalar: windows 1`] = `
"
\`\`\`graphql
TestScalar
\`\`\`
"
`;

exports[`lib printer class Printer printCode() returns a Markdown graphql codeblock with type union: windows 1`] = `
"
\`\`\`graphql
TestUnion
\`\`\`
"
`;

exports[`lib printer class Printer printCodeArguments() returns a Markdown one line per formatted argument with default value surrounded by (): windows 1`] = `
"(
  ParamWithDefault: string = defaultValue
  ParamNoDefault: any
)"
`;

exports[`lib printer class Printer printCodeDirective() returns a directive with its arguments: windows 1`] = `
"directive @FooBar(
arg: boolean
)"
`;

exports[`lib printer class Printer printCodeDirective() returns a directive: windows 1`] = `"directive @FooBar"`;

exports[`lib printer class Printer printCodeEnum() returns enum code structure: windows 1`] = `
"enum EnumTypeName {
  one
  two
}"
`;

exports[`lib printer class Printer printCodeField() returns a field with its type and arguments: windows 1`] = `
"FooBar(
arg: boolean
): string
"
`;

exports[`lib printer class Printer printCodeField() returns a field with its type: windows 1`] = `
"FooBar: string
"
`;

exports[`lib printer class Printer printCodeScalar() returns scalar code structure: windows 1`] = `"scalar ScalarTypeName"`;

exports[`lib printer class Printer printCodeType() returns an interface with its fields: windows 1`] = `
"interface undefined {
  one
  two
}"
`;

exports[`lib printer class Printer printCodeType() returns an object with its fields and interfaces: windows 1`] = `
"type TestName implements TestInterfaceName {
  one
  two
}"
`;

exports[`lib printer class Printer printCodeUnion() returns union code structure: windows 1`] = `"union UnionTypeName = one | two"`;

exports[`lib printer class Printer printDescription() return DEPRECATED tag if deprecated: windows 1`] = `
"<span class=\\"badge badge--warning\\">DEPRECATED: Foobar</span>

Lorem ipsum"
`;

exports[`lib printer class Printer printDescription() returns the default text if no description: windows 1`] = `"No description"`;

exports[`lib printer class Printer printDescription() returns the type description text: windows 1`] = `"Lorem ipsum"`;

exports[`lib printer class Printer printHeader() returns a Docusaurus document header: windows 1`] = `
"---
id: an-object-type-name
title: An Object Type Name
---
"
`;

exports[`lib printer class Printer printSection() returns Markdown ### section by default: windows 1`] = `
"### section title

section content

"
`;

exports[`lib printer class Printer printSection() returns Markdown custom section level: windows 1`] = `
"# section title

section content

"
`;

exports[`lib printer class Printer printSectionItem() returns Markdown #### link section with description: windows 1`] = `
"#### [\`EntityTypeName\`](docs/graphql/objects/entity-type-name) 

Lorem ipsum
"
`;

exports[`lib printer class Printer printSectionItem() returns Markdown #### link section with field parameters: windows 1`] = `
"#### [\`EntityTypeName\`](docs/graphql/objects/entity-type-name) 


- ##### \`ParameterTypeName\` 


"
`;

exports[`lib printer class Printer printSectionItem() returns Markdown #### link section with sub type: windows 1`] = `
"#### \`EntityTypeName\` ([\`AnObjectType\`](docs/graphql/objects/an-object-type))


"
`;

exports[`lib printer class Printer printSectionItems() returns Markdown one line per item: windows 1`] = `
"one

two

three"
`;

exports[`lib printer class Printer printType() prints a specification section if scalar as directive @specifiedBy: windows 1`] = `
"---
id: scalar
title: undefined
---

Lorem Ipsum

\`\`\`graphql
scalar undefined
\`\`\`

export const specifiedByLinkCss = { fontSize:'1.5em', paddingLeft:'4px' };

### Specification<a className=\\"link\\" style={specifiedByLinkCss} target=\\"_blank\\" href=\\"http://lorem.ipsum\\" title=\\"Specified by http://lorem.ipsum\\">âŽ˜</a>
"
`;

exports[`lib printer class Printer printType() returns a Markdown formatted Docusaurus content for input implementing interface: windows 1`] = `
"header-input

Test Input

\`input\`

Fields

Interfaces
"
`;

exports[`lib printer class Printer printType() returns a Markdown formatted Docusaurus content for object implementing interface: windows 1`] = `
"header-object

Test Object

\`object\`

Fields

Interfaces
"
`;

exports[`lib printer class Printer printType() returns a Markdown formatted Docusaurus content for query: windows 1`] = `
"header-query

Test Query

\`query\`

Arguments

Type
"
`;

exports[`lib printer class Printer printType() returns a Markdown formatted Docusaurus content for type directive: windows 1`] = `
"header-directive

Test Directive

\`directive\`

Arguments
"
`;

exports[`lib printer class Printer printType() returns a Markdown formatted Docusaurus content for type enum: windows 1`] = `
"header-enum

Test Enum

\`enum\`

Values
"
`;

exports[`lib printer class Printer printType() returns a Markdown formatted Docusaurus content for type input: windows 1`] = `
"header-input

Test Input

\`input\`

Fields
"
`;

exports[`lib printer class Printer printType() returns a Markdown formatted Docusaurus content for type interface: windows 1`] = `
"header-interface

Test Interface

\`interface\`

Fields
"
`;

exports[`lib printer class Printer printType() returns a Markdown formatted Docusaurus content for type object: windows 1`] = `
"header-object

Test Object

\`object\`

Fields
"
`;

exports[`lib printer class Printer printType() returns a Markdown formatted Docusaurus content for type scalar: windows 1`] = `
"header-scalar

Test Scalar

\`scalar\`
"
`;

exports[`lib printer class Printer printType() returns a Markdown formatted Docusaurus content for type union: windows 1`] = `
"header-union

Test Union

\`union\`

Possible types
"
`;

exports[`lib printer class Printer toLink() returns markdown link for GraphQL directive: windows 1`] = `"[\`TestDirective\`](docs/graphql/directives/test-directive)"`;

exports[`lib printer class Printer toLink() returns markdown link for GraphQL enum: windows 1`] = `"[\`TestEnum\`](docs/graphql/enums/test-enum)"`;

exports[`lib printer class Printer toLink() returns markdown link for GraphQL input: windows 1`] = `"[\`TestInput\`](docs/graphql/inputs/test-input)"`;

exports[`lib printer class Printer toLink() returns markdown link for GraphQL interface: windows 1`] = `"[\`TestInterface\`](docs/graphql/interfaces/test-interface)"`;

exports[`lib printer class Printer toLink() returns markdown link for GraphQL object: windows 1`] = `"[\`TestObject\`](docs/graphql/objects/test-object)"`;

exports[`lib printer class Printer toLink() returns markdown link for GraphQL scalar: windows 1`] = `"[\`TestScalar\`](docs/graphql/scalars/test-scalar)"`;

exports[`lib printer class Printer toLink() returns markdown link for GraphQL union: windows 1`] = `"[\`TestUnion\`](docs/graphql/unions/test-union)"`;

exports[`lib printer class Printer toLink() returns markdown link surrounded by [] for GraphQL list/array: windows 1`] = `"[\`TestObjectList\`](docs/graphql/objects/test-object-list)"`;

exports[`lib printer class Printer toLink() returns plain text for unknown entities: windows 1`] = `"\`fooBar\`"`;
