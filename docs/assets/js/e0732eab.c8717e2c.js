"use strict";(self.webpackChunkdocusaurus_2=self.webpackChunkdocusaurus_2||[]).push([[1946],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(n),m=r,h=p["".concat(l,".").concat(m)]||p[m]||u[m]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1687:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return c},default:function(){return p}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={id:"save-media-list-entry",title:"SaveMediaListEntry"},l=void 0,d={unversionedId:"schema/mutations/save-media-list-entry",id:"schema/mutations/save-media-list-entry",isDocsHomePage:!1,title:"SaveMediaListEntry",description:"Create or update a media list entry",source:"@site/docs/schema/mutations/save-media-list-entry.mdx",sourceDirName:"schema/mutations",slug:"/schema/mutations/save-media-list-entry",permalink:"/graphql-markdown/schema/mutations/save-media-list-entry",tags:[],version:"current",frontMatter:{id:"save-media-list-entry",title:"SaveMediaListEntry"},sidebar:"basic",previous:{title:"SaveListActivity",permalink:"/graphql-markdown/schema/mutations/save-list-activity"},next:{title:"SaveMessageActivity",permalink:"/graphql-markdown/schema/mutations/save-message-activity"}},c=[{value:"Arguments",id:"arguments",children:[{value:"<code>id</code> (Int)",id:"id-int",children:[],level:4},{value:"<code>mediaId</code> (Int)",id:"mediaid-int",children:[],level:4},{value:"<code>status</code> (MediaListStatus)",id:"status-medialiststatus",children:[],level:4},{value:"<code>score</code> (Float)",id:"score-float",children:[],level:4},{value:"<code>scoreRaw</code> (Int)",id:"scoreraw-int",children:[],level:4},{value:"<code>progress</code> (Int)",id:"progress-int",children:[],level:4},{value:"<code>progressVolumes</code> (Int)",id:"progressvolumes-int",children:[],level:4},{value:"<code>repeat</code> (Int)",id:"repeat-int",children:[],level:4},{value:"<code>priority</code> (Int)",id:"priority-int",children:[],level:4},{value:"<code>private</code> (Boolean)",id:"private-boolean",children:[],level:4},{value:"<code>notes</code> (String)",id:"notes-string",children:[],level:4},{value:"<code>hiddenFromStatusLists</code> (Boolean)",id:"hiddenfromstatuslists-boolean",children:[],level:4},{value:"<code>customLists</code> (String)",id:"customlists-string",children:[],level:4},{value:"<code>advancedScores</code> (Float)",id:"advancedscores-float",children:[],level:4},{value:"<code>startedAt</code> (FuzzyDateInput)",id:"startedat-fuzzydateinput",children:[],level:4},{value:"<code>completedAt</code> (FuzzyDateInput)",id:"completedat-fuzzydateinput",children:[],level:4}],level:3},{value:"Type",id:"type",children:[{value:"MediaList",id:"medialist",children:[],level:4}],level:3}],u={toc:c};function p(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Create or update a media list entry"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-graphql"},"SaveMediaListEntry(\n  id: Int\n  mediaId: Int\n  status: MediaListStatus\n  score: Float\n  scoreRaw: Int\n  progress: Int\n  progressVolumes: Int\n  repeat: Int\n  priority: Int\n  private: Boolean\n  notes: String\n  hiddenFromStatusLists: Boolean\n  customLists: [String]\n  advancedScores: [Float]\n  startedAt: FuzzyDateInput\n  completedAt: FuzzyDateInput\n): MediaList\n\n")),(0,i.kt)("h3",{id:"arguments"},"Arguments"),(0,i.kt)("h4",{id:"id-int"},(0,i.kt)("inlineCode",{parentName:"h4"},"id")," (",(0,i.kt)("a",{parentName:"h4",href:"/schema/scalars/int"},(0,i.kt)("inlineCode",{parentName:"a"},"Int")),")"),(0,i.kt)("p",null,"The list entry id, required for updating"),(0,i.kt)("h4",{id:"mediaid-int"},(0,i.kt)("inlineCode",{parentName:"h4"},"mediaId")," (",(0,i.kt)("a",{parentName:"h4",href:"/schema/scalars/int"},(0,i.kt)("inlineCode",{parentName:"a"},"Int")),")"),(0,i.kt)("p",null,"The id of the media the entry is of"),(0,i.kt)("h4",{id:"status-medialiststatus"},(0,i.kt)("inlineCode",{parentName:"h4"},"status")," (",(0,i.kt)("a",{parentName:"h4",href:"/schema/enums/media-list-status"},(0,i.kt)("inlineCode",{parentName:"a"},"MediaListStatus")),")"),(0,i.kt)("p",null,"The watching/reading status"),(0,i.kt)("h4",{id:"score-float"},(0,i.kt)("inlineCode",{parentName:"h4"},"score")," (",(0,i.kt)("a",{parentName:"h4",href:"/schema/scalars/float"},(0,i.kt)("inlineCode",{parentName:"a"},"Float")),")"),(0,i.kt)("p",null,"The score of the media in the user's chosen scoring method"),(0,i.kt)("h4",{id:"scoreraw-int"},(0,i.kt)("inlineCode",{parentName:"h4"},"scoreRaw")," (",(0,i.kt)("a",{parentName:"h4",href:"/schema/scalars/int"},(0,i.kt)("inlineCode",{parentName:"a"},"Int")),")"),(0,i.kt)("p",null,"The score of the media in 100 point"),(0,i.kt)("h4",{id:"progress-int"},(0,i.kt)("inlineCode",{parentName:"h4"},"progress")," (",(0,i.kt)("a",{parentName:"h4",href:"/schema/scalars/int"},(0,i.kt)("inlineCode",{parentName:"a"},"Int")),")"),(0,i.kt)("p",null,"The amount of episodes/chapters consumed by the user"),(0,i.kt)("h4",{id:"progressvolumes-int"},(0,i.kt)("inlineCode",{parentName:"h4"},"progressVolumes")," (",(0,i.kt)("a",{parentName:"h4",href:"/schema/scalars/int"},(0,i.kt)("inlineCode",{parentName:"a"},"Int")),")"),(0,i.kt)("p",null,"The amount of volumes read by the user"),(0,i.kt)("h4",{id:"repeat-int"},(0,i.kt)("inlineCode",{parentName:"h4"},"repeat")," (",(0,i.kt)("a",{parentName:"h4",href:"/schema/scalars/int"},(0,i.kt)("inlineCode",{parentName:"a"},"Int")),")"),(0,i.kt)("p",null,"The amount of times the user has rewatched/read the media"),(0,i.kt)("h4",{id:"priority-int"},(0,i.kt)("inlineCode",{parentName:"h4"},"priority")," (",(0,i.kt)("a",{parentName:"h4",href:"/schema/scalars/int"},(0,i.kt)("inlineCode",{parentName:"a"},"Int")),")"),(0,i.kt)("p",null,"Priority of planning"),(0,i.kt)("h4",{id:"private-boolean"},(0,i.kt)("inlineCode",{parentName:"h4"},"private")," (",(0,i.kt)("a",{parentName:"h4",href:"/schema/scalars/boolean"},(0,i.kt)("inlineCode",{parentName:"a"},"Boolean")),")"),(0,i.kt)("p",null,"If the entry should only be visible to authenticated user"),(0,i.kt)("h4",{id:"notes-string"},(0,i.kt)("inlineCode",{parentName:"h4"},"notes")," (",(0,i.kt)("a",{parentName:"h4",href:"/schema/scalars/string"},(0,i.kt)("inlineCode",{parentName:"a"},"String")),")"),(0,i.kt)("p",null,"Text notes"),(0,i.kt)("h4",{id:"hiddenfromstatuslists-boolean"},(0,i.kt)("inlineCode",{parentName:"h4"},"hiddenFromStatusLists")," (",(0,i.kt)("a",{parentName:"h4",href:"/schema/scalars/boolean"},(0,i.kt)("inlineCode",{parentName:"a"},"Boolean")),")"),(0,i.kt)("p",null,"If the entry shown be hidden from non-custom lists"),(0,i.kt)("h4",{id:"customlists-string"},(0,i.kt)("inlineCode",{parentName:"h4"},"customLists")," (",(0,i.kt)("a",{parentName:"h4",href:"/schema/scalars/string"},(0,i.kt)("inlineCode",{parentName:"a"},"String")),")"),(0,i.kt)("p",null,"Array of custom list names which should be enabled for this entry"),(0,i.kt)("h4",{id:"advancedscores-float"},(0,i.kt)("inlineCode",{parentName:"h4"},"advancedScores")," (",(0,i.kt)("a",{parentName:"h4",href:"/schema/scalars/float"},(0,i.kt)("inlineCode",{parentName:"a"},"Float")),")"),(0,i.kt)("p",null,"Array of advanced scores"),(0,i.kt)("h4",{id:"startedat-fuzzydateinput"},(0,i.kt)("inlineCode",{parentName:"h4"},"startedAt")," (",(0,i.kt)("a",{parentName:"h4",href:"/schema/inputs/fuzzy-date-input"},(0,i.kt)("inlineCode",{parentName:"a"},"FuzzyDateInput")),")"),(0,i.kt)("p",null,"When the entry was started by the user"),(0,i.kt)("h4",{id:"completedat-fuzzydateinput"},(0,i.kt)("inlineCode",{parentName:"h4"},"completedAt")," (",(0,i.kt)("a",{parentName:"h4",href:"/schema/inputs/fuzzy-date-input"},(0,i.kt)("inlineCode",{parentName:"a"},"FuzzyDateInput")),")"),(0,i.kt)("p",null,"When the entry was completed by the user"),(0,i.kt)("h3",{id:"type"},"Type"),(0,i.kt)("h4",{id:"medialist"},(0,i.kt)("a",{parentName:"h4",href:"/schema/objects/media-list"},(0,i.kt)("inlineCode",{parentName:"a"},"MediaList"))),(0,i.kt)("p",null,"List of anime or manga"))}p.isMDXComponent=!0}}]);